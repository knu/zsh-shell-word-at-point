# -*- mode: sh -*-
#
# shell-word-at-point - zle function to get a shell word at point
#
# Copyright (c) 2015-2023 Akinori MUSHA
# Licensed under the 2-clause BSD license.
#
# This file contains several functions to help deal with a shell word
# at point.
#
# - `shell-word-at-point` sets a shell word at point to a global
#   variable `shell_word`.
#
# - `edit-file-at-point` invokes `EDITOR` (default: `vi`) passing a file
#   name at point.
#
# - `view-file-at-point` invokes `PAGER` (default: `more`) passing a
#   file name at point.
#
# - `run-shell-word-at-point` opens a new command line with only the
#   current shell word set, pushing the whole command line with
#   `push-line`.
#
# After closing `EDITOR` or `PAGER`, you will be back on the command
# line exactly with the previous status.
#
# Usage:
#     autoload -Uz shell-word-at-point
#     shell-word-at-point
#     bindkey '^X^F' edit-file-at-point
#     bindkey '^X^R' view-file-at-point
#

autoload match-words-by-style

shell-word-at-point () {
    emulate -L zsh
    local cursor qword
    local -a matched_words

    # Ignore spaces in the left if there is no word at the cursor
    if [[ $RBUFFER =~ ^([\ \n]|$) && $LBUFFER =~ [^\ ](\ +)$ ]]; then
        cursor=$CURSOR
        ((CURSOR-=$#match[1]))
    fi

    match-words-by-style -w shell
    [[ -n $matched_words[3] ]] || qword=$matched_words[2]
    [[ -n $matched_words[4] ]] || qword=$qword$matched_words[5]

    [[ -z $cursor ]] || CURSOR=$cursor

    # Delete a trailing space match-words-by-style leaves in
    # <word-after-cursor>.
    shell_word=${(z)qword}

    [[ -n $shell_word ]]
}

zle -N shell-word-at-point

shell-word-at-point--extract-filename () {
    emulate -L zsh
    setopt extended_glob
    local word=$1 lineno

    filename_at_point=
    lineno_at_point=

    for word in $word ${word#?*=}; do
        if [[ -e ${(Q)~word} ]] || filename_at_point="$(shell-word-at-point-whence ${(Q)~word})"; then
            break
        fi
        if [[ $word =~ ^(.+):0*([1-9][0-9]*)$ ]]; then
            word=$match[1]
            lineno=$match[2]
            if [[ -e ${(Q)~word} ]] || filename_at_point="$(shell-word-at-point-whence ${(Q)~word})"; then
                lineno_at_point=$lineno
                break
            fi
        fi
    done

    : ${filename_at_point:=${(Q)~word}}
}

shell-word-at-point-whence () {
    emulate -L zsh
    local -a candidates
    local f

    case "$1" in
        gmake)
            candidates=(GNUmakefile Makefile makefile) ;;
        make)
            case "$(uname -s)" in
                Linux|Darwin|GNU*|MINGW*|MSYS*|CYGWIN*)
                    candidates=(GNUmakefile Makefile makefile) ;;
                *BSD|DragonFly)
                    candidates=(BSDmakefile Makefile makefile) ;;
                *)
                    candidates=(Makefile makefile) ;;
            esac ;;
        cmake)
            candidates=(CMakeLists.txt) ;;
        rake)
            candidates=(Rakefile) ;;
    esac

    for f in $candidates; do
        if [[ -f "$f" ]]; then
            echo "$f"
            return
        fi
    done

    whence -p "$1"
}

edit-file-at-point () {
    emulate -L zsh
    local shell_word filename_at_point lineno_at_point

    zle shell-word-at-point

    shell-word-at-point--extract-filename ${(Q)~shell_word}

    if [[ -z $filename_at_point ]]; then
        echo -n '\a'
        return 1
    fi

    if [[ ! -e $filename_at_point ]]; then
        echo
        read -q key"?zsh: Edit a new file \"$filename_at_point\" ([y]es, [n]o)? "
        echoti cuu1
        zle reset-prompt
        [[ $key = y ]] || return 1
    fi

    zle -I
    eval "${(q)EDITOR-vi} ${lineno_at_point:+"+$lineno_at_point "}${(q)filename_at_point} < ${(q)TTY}"
}

zle -N edit-file-at-point

view-file-at-point () {
    emulate -L zsh
    local shell_word filename_at_point lineno_at_point

    zle shell-word-at-point

    shell-word-at-point--extract-filename ${(Q)~shell_word}

    if [[ -z $filename_at_point || ! -e $filename_at_point ]]; then
        echo -n '\a'
        return 1
    fi

    zle -I
    eval "${(q)PAGER-more} ${lineno_at_point:+"+$lineno_at_point "}${(q)filename_at_point} < ${(q)TTY}"
}

zle -N view-file-at-point

run-shell-word-at-point () {
    emulate -L zsh
    local shell_word

    zle shell-word-at-point

    zle push-line
    BUFFER=" $shell_word"
}

zle -N run-shell-word-at-point
